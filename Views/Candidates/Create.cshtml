@model EduCare.Models.Candidate

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
    System.Data.DataTable country = EduCare.Models.AllProcs.GetCountry();
    System.Data.DataTable state = EduCare.Models.AllProcs.GetState();
    System.Data.DataTable dg = EduCare.Models.AllProcs.GetDegree();
    System.Text.StringBuilder degree = new System.Text.StringBuilder();
    for (int i = 0; i < dg.Rows.Count; i++)
    {
        degree.Append("<option value='" + dg.Rows[i]["Id"].ToString() + "'>" + dg.Rows[i]["Name"].ToString() + "</option>");
    }
    System.Data.DataTable un = EduCare.Models.AllProcs.GetUniversity();
    System.Text.StringBuilder university = new System.Text.StringBuilder();
    for (int i = 0; i < un.Rows.Count; i++)
    {
        university.Append("<option value='" + un.Rows[i]["Id"].ToString() + "'>" + un.Rows[i]["Name"].ToString() + "</option>");
    }

    System.Data.DataTable getskill = EduCare.Models.AllProcs.GetSkill();
    //System.Data.DataTable getskillbyId = EduCare.Models.AllProcs.GetSkillbyId(Model.Id);
}

<h4 class="fw-bold mt-3 mb-3"><a href=@Url.Action("Index","Candidates") class="back-btn"><i class="fa fa-arrow-left"></i> Create Candidate</a></h4>

<form method="post" action="/Candidates/Create" enctype="multipart/form-data">
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="box box-primary">
        <div class="box-body">

            <h4 class="mt-4">Basic Details</h4>
            <hr />
            <div class="row">
                <div class="col-sm-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label label-required" })
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @required = "required", @placeholder = "Name" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-sm-2">
                    <div class="form-group">
                        @Html.LabelFor(model => model.MobileNo, htmlAttributes: new { @class = "control-label label-required" })
                        @Html.EditorFor(model => model.MobileNo, new { htmlAttributes = new { @class = "form-control", @required = "required", @placeholder = "Contact No.", @maxlength = "15" } })
                        @Html.ValidationMessageFor(model => model.MobileNo, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-sm-2">
                    <div class="form-group">
                        @Html.LabelFor(model => model.WhatsAppNo, htmlAttributes: new { @class = "control-label label-required" })
                        @Html.EditorFor(model => model.WhatsAppNo, new { htmlAttributes = new { @class = "form-control", @required = "required", @placeholder = "WhatsApp No.", @maxlength = "15" } })
                        @Html.ValidationMessageFor(model => model.WhatsAppNo, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label label-required" })
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @required = "required", @placeholder = "Email" } })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-2">
                    <div class="form-group">
                        @Html.LabelFor(model => model.DOB, htmlAttributes: new { @class = "control-label label-required" })
                        @Html.EditorFor(model => model.DOB, new { htmlAttributes = new { @class = "form-control", @type = "date", @required = "required" } })
                        @Html.ValidationMessageFor(model => model.DOB, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-sm-2">
                    <div class="form-group">
                        @Html.LabelFor(model => model.CountryId, htmlAttributes: new { @class = "control-label label-required" })
                        <select id="CountryId" name="CountryId" class="form-control" onchange="GateState()">
                            <option value="">Select</option>
                            @for (int i = 0; i < country.Rows.Count; i++)
                            {
                                <option value="@country.Rows[i]["Id"].ToString()">@country.Rows[i]["Name"].ToString()</option>
                            }
                        </select>
                        @Html.ValidationMessageFor(model => model.CountryId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-sm-2">
                    <div class="form-group">
                        @Html.LabelFor(model => model.StateId, htmlAttributes: new { @class = "control-label label-required" })
                        <select id="StateId" name="StateId" class="form-control" required>
                            <option value="">Select</option>
                        </select>
                        @Html.ValidationMessageFor(model => model.StateId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label label-required" })
                        @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control", @required = "required", @placeholder = "City" } })
                        @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-2">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Pin, htmlAttributes: new { @class = "control-label label-required" })
                        @Html.EditorFor(model => model.Pin, new { htmlAttributes = new { @class = "form-control", @required = "required", @placeholder = "Pincode" } })
                        @Html.ValidationMessageFor(model => model.Pin, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-sm-10">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label label-required" })
                        @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control", @required = "required", @placeholder = "Address" } })
                        @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-3">
                    <div class="form-group">
                        @Html.LabelFor(model => model.PrimarySkillId, htmlAttributes: new { @class = "control-label label-required" })
                        <select id="PrimarySkillId" name="PrimarySkillId" class="form-control" onchange="GetSkill('0')">
                            <option value="">Select Skill</option>
                            @for (int i = 0; i < getskill.Rows.Count; i++)
                            {
                                <option value="@getskill.Rows[i]["Id"].ToString()">@getskill.Rows[i]["SkillCode"].ToString()</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group">
                        <label class="label-required">Subject</label>
                        <input type="text" disabled id="ShowPSubject" name="ShowPSubject" class="form-control" />
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group">
                        <label class="label-required">Level</label>
                        <input type="text" disabled id="ShowPLevel" name="ShowPLevel" class="form-control" />
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group">
                        <label class="label-required">Affiliation</label>
                        <input type="text" disabled id="ShowPAff" name="ShowPAff" class="form-control" />
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-3">
                    <div class="form-group">
                        @Html.LabelFor(model => model.SecondarySkilId, htmlAttributes: new { @class = "control-label  " })
                        <select id="SecondarySkilId" name="SecondarySkilId" class="form-control" onchange="GetSkill('1')">
                            <option value="">Select Skill</option>
                            @for (int i = 0; i < getskill.Rows.Count; i++)
                            {
                                <option value="@getskill.Rows[i]["Id"].ToString()">@getskill.Rows[i]["SkillCode"].ToString()</option>
                            }
                        </select>
                        @Html.ValidationMessageFor(model => model.SecondarySkilId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-sm-3">
                    <div class="form-group">
                        <label>Subject</label>
                        <input type="text" disabled id="ShowSSubject" name="ShowSSubject" class="form-control" />
                    </div>
                </div>
                <div class="col-sm-3">
                    <div class="form-group">
                        <label>Level</label>
                        <input type="text" disabled id="ShowSLevel" name="ShowSLevel" class="form-control" />
                    </div>
                </div>
                <div class="col-sm-3">
                    <div class="form-group">
                        <label>Affiliation</label>
                        <input type="text" disabled id="ShowSAff" name="ShowSAff" class="form-control" />
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Resume, htmlAttributes: new { @class = "control-label label-required" })
                        @*@Html.EditorFor(model => model.Resume, new { htmlAttributes = new { @class = "form-control", @required = "required", @type = "file" } })*@
                        <input id="Resume" name="Resume" class="form-control" type="file" required />
                        @Html.ValidationMessageFor(model => model.Resume, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-sm-2">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Experiance, htmlAttributes: new { @class = "control-label label-required" })
                        @Html.EditorFor(model => model.Experiance, new { htmlAttributes = new { @class = "form-control", @required = "required", @placeholder = "Exp. as on date" } })
                        @Html.ValidationMessageFor(model => model.Experiance, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <h4 class="mt-4">Education</h4>
            <hr />
            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group table-responsive">
                        <table class="table table-bordered table-sm text-center">
                            <thead style="background-color:#d7d7d7;padding:5px!important" ;>
                                <tr>
                                    <th class="label-required">Degree/Certificate</th>
                                    <th style="width: 15%;">Specialization</th>
                                    <th class="label-required" style="width: 15%;">University</th>
                                    <th class="label-required">School/College</th>
                                    <th class="label-required" style="width: 15%;">Start Date</th>
                                    <th class="label-required" style="width: 15%;">End Date</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody id="row">
                                <tr id="TRow_0">
                                    <td>
                                        <select id="DegreeId_0" name="GDegreeId" class="form-control" required>
                                            @Html.Raw(degree);
                                        </select>
                                    </td>
                                    <td><input id="Specialization_0" name="GSpecialization" type="text" class="form-control" placeholder="Specialization" required /></td>
                                    <td>
                                        <select id="UniversityId_0" name="GUniversityId" class="form-control" required>
                                            @Html.Raw(university);
                                        </select>
                                    </td>
                                    <td><input id="SchoolName_0" name="GSchoolName" type="text" class="form-control" placeholder="School/College" required /></td>
                                    <td><input id="StartDate_0" name="GStartDate" type="date" class="form-control" required /></td>
                                    <td><input id="Enddate_0" name="GEnddate" type="date" class="form-control" required /></td>
                                    <td>
                                        <button type="button" class="btn btn-danger" id="delBtn_0" onclick="deleteEducation('TRow_0')"><i class="fa fa-trash"></i></button>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>

            </div>
            <button type="button" class="btn btn-primary float-end" onclick="AddEducation()">ADD ROW</button>

            <h4 class="mt-5">Work Experience</h4>
            <hr />
            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group table-responsive">
                        <table class="table table-bordered table-sm text-center">
                            <thead style="background-color:#d7d7d7;padding:5px!important">
                                <tr>
                                    <th class="label-required" style="width: 30%;">Organisation</th>
                                    <th class="label-required" style="width: 25%;">Designation</th>
                                    <th class="label-required" style="width: 20%;">Start Date</th>
                                    <th class="label-required" style="width: 20%;">End Date</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody id="rows">
                                <tr id="wTrow_0">
                                    <td><input id="Organization_0" name="Organization" type="text" class="form-control" placeholder="Organisation" /></td>
                                    <td><input id="Designation_0" name="Designation" type="text" class="form-control" placeholder="Designation" /></td>
                                    <td><input id="Startdate_0" name="Startdate" type="date" class="form-control" /></td>
                                    <td><input id="Enddate_0" name="Enddate" type="date" class="form-control" /></td>
                                    <td><button type="button" class="btn btn-danger" onclick="deleteWorkExperiance('wTrow_0')"><i class="fa fa-trash"></i></button></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-2  float-end">
                    <div class="form-group">
                        <button type="button" class="btn btn-primary float-end" onclick="AddWorkExperience()">ADD ROW</button>
                    </div>
                </div>
            </div>


            <div class="row" style="margin-top:20px!important;">
                <div class="col-sm-2">
                    <div class="form-group">
                        <input type="submit" value="Save" class="btn btn-default" />
                    </div>
                </div>
                <div class="col-sm-2 float-end">
                    <div class="form-group ">
                        <a type="button" href="@Url.Action("Index","Candidates")" class="btn btn-default" style="margin-left: 80px;"><i class="fa fa-arrow-left"></i> Back</a>
                    </div>
                </div>
            </div>

        </div>
    </div>
</form>



<script>
    var i = 0;
    function AddEducation() {
        i += 1;
        var tr = `<tr id="TRow_` + i + `">
          <td>
              <select id="DegreeId_` + i + `" name="GDegreeId" class="form-control" required>
                  @Html.Raw(degree);
              </select>
          </td>
          <td><input id="Specialization_` + i + `" name="GSpecialization" type="text" class="form-control" placeholder="Specialization" required /></td>
          <td>
              <select id="UniversityId_` + i + `" name="GUniversityId" class="form-control" required>
                  @Html.Raw(university);
              </select>
          </td>
          <td><input id="SchoolName_` + i + `" name="GSchoolName" type="text" class="form-control" placeholder="School/College" required/></td>
          <td><input id="StartDate_` + i + `" name="GStartDate" type="date" class="form-control"  required/></td>
          <td><input id="Enddate_` + i + `" name="GEnddate" type="date" class="form-control" required /></td>
          <td>
              <button type="button" class="btn btn-danger"  onclick="deleteEducation('TRow_` + i + `')"><i class="fa fa-trash"></i></button>
                                    </td>
                                </tr>`;
        $('#row').append(tr);
    }

    function deleteEducation(id) {
        var count = $('#row tr').length;
        if (count == 1) {
            alert('Cant delete all row');
        } else {
            $('#' + id).remove();
        }
    }

    function deleteWorkExperiance(id) {
        var count = $('#rows tr').length;
        if (count == 1) {
            alert('Cant delete all row');
        } else {
            $('#' + id).remove();
        }
    }

    function AddWorkExperience() {
        i += 1;
        var tr = `<tr id="wTrow_` + i +`">
          <td><input id="Organization_ ` + i +`" name="Organization" type="text" class="form-control" placeholder="Organisation" /></td>
          <td><input id="Designation_` + i + `" name="Designation" type="text" class="form-control" placeholder="Designation" /></td>
          <td><input id="Startdate_` + i + `" name="Startdate" type="date" class="form-control" /></td>
          <td><input id="Enddate_ ` + i + `" name="Enddate" type="date" class="form-control" /></td>
          <td><button type="button" class="btn btn-danger" onclick="deleteWorkExperiance('wTrow_` + i + `')"><i class="fa fa-trash"></i></button></td>
        </tr>`
        $('#rows').append(tr);
    }

    function GateState() {
        var cid = $('#CountryId').val();
        if (cid != '') {
            var opts = '';
            $.get('/Candidates/StateChoice', { Cid: cid }, function (data) {
                var d = JSON.parse(data);
                if (d.length > 0) {
                    for (var i = 0; i < d.length; i++) {
                        opts += '<option value="' + d[i].Id + '">' + d[i].Name + '</option>';
                    }
                }
                else {
                    opts = '<option value="">No state found!</option>';
                }
                $('#StateId').html(opts);
            });

        }
        else {
            $('#StateId').html('<option value="">Select</option>');
        }
    }

    function GetSkill(way) {

        var Pskillcode = $('#PrimarySkillId').val();
        var Sskillcode = $('#SecondarySkilId').val();
        var flag = true;
        if (Pskillcode != '' && Sskillcode != '') {
            if (Pskillcode == Sskillcode) {
                if (way == '0') {
                    $('#PrimarySkillId').val('');
                    $('#ShowPSubject').val('');
                    $('#ShowPLevel').val('');
                    $('#ShowPAff').val('');
                }
                else {
                    $('#SecondarySkilId').val('');
                    $('#ShowSSubject').val('');
                    $('#ShowSLevel').val('');
                    $('#ShowSAff').val('');
                }
                SnackMsg('Primary & Secondary skills can not be same.');
                flag = false;
            }
        }
        if (flag) {
            if (way == '0') {
                if (Pskillcode != '') {

                    $.get('/Candidates/GetSkillbyId', { skillId: Pskillcode }, function (data) {
                        var opts = JSON.parse(data);
                        if (opts.length > 0) {
                            $('#ShowPSubject').val(opts[0].Subject);
                            $('#ShowPLevel').val(opts[0].Level);
                            $('#ShowPAff').val(opts[0].Affiliation);
                        }

                    });
                }
                else {
                    $('#ShowPSubject').val('');
                    $('#ShowPLevel').val('');
                    $('#ShowPAff').val('');
                }
            }
            else {

                if (Sskillcode != '') {

                    $.get('/Candidates/GetSkillbyId', { skillId: Sskillcode }, function (data) {
                        var opts = JSON.parse(data);
                        if (opts.length > 0) {
                            $('#ShowSSubject').val(opts[0].Subject);
                            $('#ShowSLevel').val(opts[0].Level);
                            $('#ShowSAff').val(opts[0].Affiliation);
                        }

                    });
                }
                else {
                    $('#ShowSSubject').val('');
                    $('#ShowSLevel').val('');
                    $('#ShowSAff').val('');
                }
            }
        }

    }
</script>






