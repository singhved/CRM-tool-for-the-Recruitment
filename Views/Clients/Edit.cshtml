@model EduCare.Models.Client

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
    System.Data.DataTable country = EduCare.Models.AllProcs.GetCountry();

    System.Data.DataTable D = EduCare.Models.AllProcs.GetDepartments();
    System.Text.StringBuilder Dept = new System.Text.StringBuilder();
    for (int i = 0; i < D.Rows.Count; i++)
    {
        Dept.Append("<option value='" + D.Rows[i]["Id"].ToString() + "'>" + D.Rows[i]["Name"].ToString() + "</option>");
    }

    System.Data.DataTable paymentTerms = EduCare.Models.AllProcs.GetPaymentTerms();

    System.Data.DataTable DG = EduCare.Models.AllProcs.GetDesignations();
    System.Text.StringBuilder Desig = new System.Text.StringBuilder();
    for (int i = 0; i < DG.Rows.Count; i++)
    {
        Desig.Append("<option value='" + DG.Rows[i]["Id"].ToString() + "'>" + DG.Rows[i]["Name"].ToString() + "</option>");
    }

    System.Data.DataTable ContactPersons = EduCare.Models.AllProcs.GetClientContactPerson(Model.Id);
}

<h4 class="fw-bold mt-3 mb-3"><a href=@Url.Action("Index","Clients") class="back-btn"><i class="fa fa-arrow-left"></i> Edit Client</a></h4>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id)
    <input type="hidden" id="DeletedIds" name="DeletedIds" />

    <div class="box box-primary">
        <div class="box-body">

            <div class="row">

                <div class="col-sm-3">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label label-required" })
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @placeholder = "Name", @required = "required" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-sm-3">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Branch, htmlAttributes: new { @class = "control-label label-required" })
                        @Html.EditorFor(model => model.Branch, new { htmlAttributes = new { @class = "form-control", @placeholder = "Branch", @required = "required" } })
                        @Html.ValidationMessageFor(model => model.Branch, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-sm-2">
                    <div class="form-group">
                        @Html.LabelFor(model => model.ContactNo, htmlAttributes: new { @class = "control-label label-required" })
                        @Html.EditorFor(model => model.ContactNo, new { htmlAttributes = new { @class = "form-control", @placeholder = "Contact No.", @required = "required", @maxlength = "15" } })
                        @Html.ValidationMessageFor(model => model.ContactNo, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label label-required" })
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @placeholder = "Email", @required = "required" } })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-sm-2">
                    <div class="form-group">
                        @Html.LabelFor(model => model.CountryId, htmlAttributes: new { @class = "control-label label-required" })
                        <select id="CountryId" name="CountryId" class="form-control" onchange="GetStates('0')" required>
                            @for (int i = 0; i < country.Rows.Count; i++)
                            {
                                <option value="@country.Rows[i]["Id"].ToString()">@country.Rows[i]["Name"].ToString()</option>
                            }
                        </select>
                        <script>$('#CountryId').val('@Model.CountryId')</script>
                        @Html.ValidationMessageFor(model => model.CountryId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-sm-2">
                    <div class="form-group">
                        @Html.LabelFor(model => model.StateId, htmlAttributes: new { @class = "control-label label-required" })
                        <select id="StateId" name="StateId" class="form-control" required>
                        </select>
                        @Html.ValidationMessageFor(model => model.StateId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-sm-2">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Pincode, htmlAttributes: new { @class = "control-label label-required" })
                        @Html.EditorFor(model => model.Pincode, new { htmlAttributes = new { @class = "form-control", @required = "required"} })
                        @Html.ValidationMessageFor(model => model.Pincode, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-sm-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label label-required" })
                        @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                        @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                    </div>
                </div>



                <div class="col-sm-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Website, htmlAttributes: new { @class = "control-label label-required" })
                        @Html.EditorFor(model => model.Website, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                        @Html.ValidationMessageFor(model => model.Website, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-sm-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label label-required" })
                        @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                        @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                    </div>
                </div>





                <div class="col-sm-2">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label label-required" })
                        <select id="Status" name="Status" class="form-control" required>
                            <option value="True">Active</option>
                            <option value="False">Inactive</option>
                        </select>
                        <script>$('#Status').val('@Model.Status')</script>
                        @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <h4>CONTACT PERSON</h4>
            <hr />
            <div class="row ">
                <div class="col-sm-12">
                    <div class="form-group table-responsive">
                        <table class="table table-bordered table-sm text-center table-condensed">
                            <thead style="background-color:#d7d7d7;color:white;">
                                <tr>
                                    <th class="label-required">Name</th>
                                    <th style="width: 15%;" class="label-required">Department</th>
                                    <th style="width: 15%;" class="label-required">Designation</th>
                                    <th class="label-required">Email</th>
                                    <th style="width: 15%;" class="label-required">Contact No.</th>
                                    <th style="width: 15%;" class="label-required">Whatsapp No.</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody id="row">
                                @for (int i = 0; i < ContactPersons.Rows.Count; i++)
                                {
                                    <tr id="TRow_@i">
                                        <td>
                                            <input type="hidden" id="GId_@i" name="GId" value="@ContactPersons.Rows[i]["Id"].ToString()" />
                                            <input id="Name_@i" name="GName" type="text" class="form-control" placeholder="Name" value="@ContactPersons.Rows[i]["Name"].ToString()" required />
                                        </td>
                                        <td>
                                            <select id="DepartmentId_@i" name="GDepartmentId" class="form-control" required>
                                                @Html.Raw(Dept)
                                            </select>
                                            <script>$('#DepartmentId_@i').val('@ContactPersons.Rows[i]["DepartmentId"].ToString()')</script>
                                        </td>
                                        <td>
                                            <select id="DesignationId_@i" name="GDesignationId" class="form-control" required>
                                                @Html.Raw(Desig)
                                            </select>
                                            <script>$('#DesignationId_@i').val('@ContactPersons.Rows[i]["DesignationId"].ToString()')</script>
                                        </td>
                                        <td><input id="Email_@i" name="GEmail" type="email" class="form-control" placeholder="Email" required value="@ContactPersons.Rows[i]["Email"].ToString()" /></td>
                                        <td><input id="ContactNo_0" name="GContactNo" type="text" class="form-control" placeholder="Contact No." required value="@ContactPersons.Rows[i]["ContactNo"].ToString()" maxlength="15" /></td>
                                        <td><input id="WhatsAppNo_0" name="GWhatsAppNo" type="text" class="form-control" placeholder="Whatsapp No." required value="@ContactPersons.Rows[i]["WhatsAppNo"].ToString()" maxlength="15" /></td>
                                        <td>
                                            <button type="button" class="btn btn-danger" onclick="deleteConntactPerson('TRow_@i', '@ContactPersons.Rows[i]["Id"].ToString()')"><i class="fa fa-trash"></i></button>
                                        </td>

                                    </tr>
                                }

                            </tbody>
                        </table>
                    </div>

                    <button type="button" class="btn btn-primary float-end" style=" margin-top: -20px!important;" onclick="addConntactPerson()">ADD ROW</button>


                </div>
            </div>

            <h4>BILLING DETAILS</h4>
            <hr />
            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group">
                        @Html.LabelFor(model => model.BillingAddress, htmlAttributes: new { @class = "control-label label-required" })
                        @Html.EditorFor(model => model.BillingAddress, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.BillingAddress, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-sm-2">
                    <div class="form-group">
                        @Html.LabelFor(model => model.BillingCountryId, htmlAttributes: new { @class = "control-label label-required" })
                        <select id="BillingCountryId" name="BillingCountryId" class="form-control" onchange="GetStates('1')" required>
                            @for (int i = 0; i < country.Rows.Count; i++)
                            {
                                <option value="@country.Rows[i]["Id"].ToString()">@country.Rows[i]["Name"].ToString()</option>
                            }
                        </select>
                        <script>$('#BillingCountryId').val('@Model.BillingCountryId')</script>
                        @Html.ValidationMessageFor(model => model.BillingCountryId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-sm-2">
                    <div class="form-group">
                        @Html.LabelFor(model => model.BillingStateId, htmlAttributes: new { @class = "control-label label-required" })
                        <select id="BillingStateId" name="BillingStateId" class="form-control" required>
                        </select>
                        @Html.ValidationMessageFor(model => model.BillingStateId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-sm-5">
                    <div class="form-group">
                        @Html.LabelFor(model => model.BillingCity, htmlAttributes: new { @class = "control-label label-required" })
                        @Html.EditorFor(model => model.BillingCity, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                        @Html.ValidationMessageFor(model => model.BillingCity, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-sm-3">
                    <div class="form-group">
                        @Html.LabelFor(model => model.BillingPincode, htmlAttributes: new { @class = "control-label label-required" })
                        @Html.EditorFor(model => model.BillingPincode, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                        @Html.ValidationMessageFor(model => model.BillingPincode, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-sm-3">
                    <div class="form-group">
                        @Html.LabelFor(model => model.BillingEmail, htmlAttributes: new { @class = "control-label label-required" })
                        @Html.EditorFor(model => model.BillingEmail, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                        @Html.ValidationMessageFor(model => model.BillingEmail, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-sm-3">
                    <div class="form-group">
                        @Html.LabelFor(model => model.BillingPhoneNo, htmlAttributes: new { @class = "control-label label-required" })
                        @Html.EditorFor(model => model.BillingPhoneNo, new { htmlAttributes = new { @class = "form-control", @required = "required", @maxlength = "15" } })
                        @Html.ValidationMessageFor(model => model.BillingPhoneNo, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-sm-3">
                    <div class="form-group">
                        @Html.LabelFor(model => model.GSTNo, htmlAttributes: new { @class = "control-label label-required" })
                        @Html.EditorFor(model => model.GSTNo, new { htmlAttributes = new { @class = "form-control", @required = "required", @maxlength = "20" } })
                        @Html.ValidationMessageFor(model => model.GSTNo, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-sm-3">
                    <div class="form-group">
                        @Html.LabelFor(model => model.PaymentTermId, htmlAttributes: new { @class = "control-label label-required" })
                        <select id="PaymentTermId" name="PaymentTermId" class="form-control">
                            @for (int i = 0; i < paymentTerms.Rows.Count; i++)
                            {
                                <option value="@paymentTerms.Rows[i]["Id"].ToString()">@paymentTerms.Rows[i]["Name"].ToString()</option>
                            }
                        </select>
                        <script>$('#PaymentTermId').val('@Model.PaymentTermId')</script>
                        @Html.ValidationMessageFor(model => model.PaymentTermId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-sm-12">
                    <div class="form-group">
                        @Html.LabelFor(model => model.TAndC, htmlAttributes: new { @class = "control-label label-required" })
                        @Html.EditorFor(model => model.TAndC, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                        @Html.ValidationMessageFor(model => model.TAndC, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>


            <div class="row">
                <div class="col-sm-2 ">
                    <div class="form-group ">
                        <input type="submit" value="Save" class="btn btn-default" />
                    </div>
                </div>
                <div class="col-sm-2 float-end">
                    <div class="form-group ">
                        <a type="button" href="@Url.Action("Index","Clients")" class="btn btn-default" style="margin-left: 80px;"><i class="fa fa-arrow-left"></i> Back</a>
                    </div>
                </div>
            </div>
        </div>
    </div>

}


<script>
    var i = @ContactPersons.Rows.Count;
    function addConntactPerson() {
        var tr = `<tr id="TRow_` + i + `">
                      <td>
                         <input type="hidden" id="GId_`+ i +`" name="GId" value="0" />
                         <input id="Name_` + i + `"  name="GName" type="text" class="form-control" placeholder="Name" required />
                      </td>
                      <td>
                          <select id="DepartmentId_` + i + `" name="GDepartmentId" class="form-control" required>
                              @Html.Raw(Dept)
                          </select></td>
                      <td><select id="DesignationId_` + i + `" name="GDesignationId" class="form-control" required>
                             @Html.Raw(Desig)
                          </select></td>
                      <td><input id="Email_` + i + `"  name="GEmail" type="email" class="form-control" placeholder="Email" required /></td>
                      <td><input id="ContactNo_` + i + `" name="GContactNo" type="text" class="form-control" placeholder="Contact No." required /></td>
                      <td><input id="WhatsAppNo_` + i + `" name="GWhatsAppNo" type="text" class="form-control" placeholder="Whatsapp No." required /></td>
                      <td><button type="button" class="btn btn-danger"  onclick="deleteConntactPerson('TRow_` + i +`', '0')"><i class="fa fa-trash"></i></button></td>
                    </tr>`;
        $('#row').append(tr);
        i += 1;
    }

    function deleteConntactPerson(RowId,Id) {
        var count = $('#row tr').length;
        if (count == 1) {
            alert('Cant delete all row');
        } else {
            if (Id != 0) {
                var DelIds = $('#DeletedIds').val();
                if (DelIds == '')
                    $('#DeletedIds').val(Id);
                else
                    $('#DeletedIds').val(DelIds + ',' + Id);
            }
            $('#' + RowId).remove();
        }
    }

    function GetStates(way, Isonload = null) {
        var Cid = $('#CountryId').val();
        if (way == 1) {
            Cid = $('#BillingCountryId').val();
        }
        var opts = '<option value="">Select Country</option>';

        if (Cid != '') {
            $.get('/Clients/StateChoice', { Cid: Cid }, function (data) {
                var d = JSON.parse(data);
                opts = '';
                if (d.length > 0) {
                    for (var i = 0; i < d.length; i++) {
                        opts += '<option value="' + d[i].Id + '">' + d[i].Name + '</option>';
                    }
                }
                else {
                    opts = '<option value="">No state found!</option>';
                }

                if (way == 0) {
                    $('#StateId').html(opts);
                    if (Isonload == '1')
                        $('#StateId').val('@Model.StateId');
                }

                else {
                    $('#BillingStateId').html(opts);
                    if (Isonload == '1')
                        $('#BillingStateId').val('@Model.BillingStateId');
                }
                    

            });
        }
        else {
            if (way == 0)
                $('#StateId').html(opts);
            else
                $('#BillingStateId').html(opts);
        }
    }

    $(function () {
        GetStates('0', '1');
        GetStates('1', '1');
    });
</script>

